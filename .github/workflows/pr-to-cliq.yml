name: GitHub Notifications to Zoho Cliq

on:
  pull_request:
    types: [opened, closed, review_requested]
  push:
    branches:
      - main

jobs:
  send-to-cliq:
    runs-on: ubuntu-latest
    steps:      
      - name: Send Event Notification to Cliq
        env:
          CLIQ_WEBHOOK_URL: https://cliq.zoho.com/company/779974041/api/v2/channelsbyname/prtocliq/message?zapikey=1001.f9e733d0afd10db830565de7179030a3.a4d83ef0250bb0ff5135997314a39940
        run: |
          EVENT_TYPE=""
          TITLE=""
          URL=""
          AUTHOR=""
          MESSAGE=""
          
          # Define a mapping of GitHub usernames to Zoho Cliq usernames
          # Format: "github_username:zoho_cliq_username"
          REVIEWERS_MAPPING=("ChathupaSandeep:Chathupa Dewasirinarayana" "developer1:dev1" "developer2:dev2")
          
          # Function to convert GitHub username to Zoho Cliq username with @ mention
          get_cliq_username() {
            local github_username="$1"
            local cliq_username=""
            
            for mapping in "${REVIEWERS_MAPPING[@]}"; do
              gh_user=$(echo "$mapping" | cut -d':' -f1)
              if [ "$gh_user" == "$github_username" ]; then
                cliq_username='@["'$(echo "$mapping" | cut -d':' -f2 | tr -d ' ')'"]'
                break
              fi
            done
            
            # If no mapping found, just use the GitHub username
            if [ -z "$cliq_username" ]; then
              cliq_username="$github_username"
            fi
            
            echo "$cliq_username"
          }

          if [ "${{ github.event_name }}" == "pull_request" ]; then
            URL="${{ github.event.pull_request.html_url }}"
            TITLE="${{ github.event.pull_request.title }}"
            AUTHOR="${{ github.event.pull_request.user.login }}"

            if [ "${{ github.event.action }}" == "opened" ]; then
              EVENT_TYPE="üöÄ New Pull Request Opened"
              MESSAGE="*${EVENT_TYPE}*\n*Title:* ${TITLE}\n*Author:* ${AUTHOR}\n*Link:* ${URL}"

            elif [ "${{ github.event.action }}" == "closed" ]; then
              if [ "${{ github.event.pull_request.merged }}" == "true" ]; then
                EVENT_TYPE="‚úÖ Pull Request Merged"
                MERGED_BY="${{ github.event.pull_request.merged_by.login }}"
                MESSAGE="*${EVENT_TYPE}*\n*Title:* ${TITLE}\n*Author:* ${AUTHOR}\n*Merged By:* ${MERGED_BY}\n*Link:* ${URL}"
              else
                EVENT_TYPE="‚ùå Pull Request Closed Without Merge"
                MESSAGE="*${EVENT_TYPE}*\n*Title:* ${TITLE}\n*Author:* ${AUTHOR}\n*Link:* ${URL}"
              fi

            elif [ "${{ github.event.action }}" == "review_requested" ]; then
              EVENT_TYPE="üîé Review Requested on Pull Request"
              GITHUB_REVIEWER="${{ github.event.requested_reviewer.login }}"
              CLIQ_REVIEWER=$(get_cliq_username "$GITHUB_REVIEWER")
              
              MESSAGE="*${EVENT_TYPE}*\n*Title:* ${TITLE}\n*Author:* ${AUTHOR}\n*Reviewer:* ${CLIQ_REVIEWER}\n*Link:* ${URL}"
            else
              EVENT_TYPE="‚ÑπÔ∏è Unknown PR Event"
              MESSAGE="*${EVENT_TYPE}*\n*Title:* ${TITLE}\n*Author:* ${AUTHOR}\n*Link:* ${URL}"
            fi

          elif [ "${{ github.event_name }}" == "push" ]; then
            BRANCH_NAME="${{ github.ref }}"
            if [ "$BRANCH_NAME" == "refs/heads/main" ]; then
              COMMIT_MESSAGE="${{ github.event.head_commit.message }}"

              if ! echo "$COMMIT_MESSAGE" | grep -qE '\(#[0-9]+\)' && ! echo "$COMMIT_MESSAGE" | grep -qE 'Merge pull request #[0-9]+'; then
                EVENT_TYPE="üö® Direct Push to Main Detected"
                AUTHOR="${{ github.actor }}"
                COMMIT_URL="https://github.com/${{ github.repository }}/commit/${{ github.sha }}"
                MESSAGE="*${EVENT_TYPE}*\n*Pushed By:* ${AUTHOR}\n*Commit:* ${COMMIT_URL}"
              fi
            fi
          fi

          if [ ! -z "$MESSAGE" ]; then
            # Use cat with heredoc to properly handle newlines and special characters
            JSON_PAYLOAD=$(cat <<EOF
            {
              "text": "$MESSAGE"
            }
          EOF
            )
            
            curl -X POST "$CLIQ_WEBHOOK_URL" \
            -H "Content-Type: application/json" \
            -d "$JSON_PAYLOAD"
          fi